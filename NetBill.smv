------------------------
-- MVSS Project       --
-- Julian Sparber     --
-- Matricola #260324  --
------------------------

--------------------------------------------------------------------------------
-- Model Checking for an NetBill Security and Transaction Protocol            --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Protocol specifications:                                                   --
-- http://www.sti.uniurb.it/aldini/mvss/2016s2a.pdf                           --
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- Modules                                                                    --
--------------------------------------------------------------------------------

MODULE main

--------------------------------------------------------------------------------
-- Variables declaration                                                      --
--------------------------------------------------------------------------------

VAR

--------------------------------------------------------------------------------
-- Consumer, Merchant and Bank states                                         --
--------------------------------------------------------------------------------

-- State description:
--  gr   "Goods Request"
--  eg   "Encrypted Goods"
--  epo  "Electronic Payment Order"
--  pa   "Payment Slip"
--  pa_c "Payment Slip (banke state after response to consumer)"
--  pa_m "Payment Slip (banke state after response to merchant)"
--  np   "No Payment"
--  nr   "No Record"
--  te   "Transaction Enquiry"
--  eepo "Endorsed EPO"

c_state: {idle, gr, epo, te, complete, error};
m_state: {idle, eg, eepo, pa, no, error};
b_state: {idle, pa_m, pa_c, np, nr, error};

--------------------------------------------------------------------------------
-- Variable assignment                                                        --
--------------------------------------------------------------------------------

ASSIGN

init(c_state) := idle;
init(m_state) := idle;
init(b_state) := idle;

--------------------------------------------------------------------------------
-- Model definition                                                           --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Consumer                                                                   --
--------------------------------------------------------------------------------

next(c_state) := 
  case
    c_state = idle : {idle, gr};
    c_state = gr & m_state = eg : epo;
    c_state = epo & m_state = pa : te;
    c_state = te & b_state = pa_c : complete;
    m_state = no | b_state = no | b_state = nr : error;
    TRUE          : c_state;
  esac;

--------------------------------------------------------------------------------
-- Merchant                                                                   --
--------------------------------------------------------------------------------

next(m_state) := 
  case
    m_state = idle & c_state = gr : eg;
    m_state = eg & c_state = epo : eepo;
    m_state = eepo & b_state = pa_m : {pa, no};
    m_state = pa & c_state = te : idle;
    m_state = no | b_state = no : error;
    TRUE          : m_state;
  esac;

--------------------------------------------------------------------------------
-- Bank                                                                   --
--------------------------------------------------------------------------------

next(b_state) := 
  case
    b_state = idle & m_state = eepo : {pa_m, np};
    b_state = pa_m & c_state = te : {pa_c, np, nr};
    b_state = pa_c & c_state = complete : idle;
    m_state = no : error;
    TRUE          : b_state;
  esac;

--------------------------------------------------------------------------------
-- Model Checking                                                             --
--------------------------------------------------------------------------------

SPEC

-- When this state is reached means the transcation has been concluded
AG !(c_state = complete & m_state = idle & b_state = idle);

SPEC
AG !(c_state = error | m_state = error | b_state = error);
