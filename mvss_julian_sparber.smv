------------------------
-- MVSS Project       --
-- Julian Sparber     --
-- Matricola #260324  --
------------------------

--------------------------------------------------------------------------------
-- Model Checking for an NetBill Security and Transaction Protocol            --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Protocol specifications:                                                   --
-- http://www.sti.uniurb.it/aldini/mvss/2016s2a.pdf                           --
--------------------------------------------------------------------------------

-- Verification of the communication 
-- between the 3 entities in the NetBill Protocol

--------------------------------------------------------------------------------
-- Modules                                                                    --
--------------------------------------------------------------------------------

MODULE main

--------------------------------------------------------------------------------
-- Variables declaration                                                      --
--------------------------------------------------------------------------------

VAR

--------------------------------------------------------------------------------
-- Consumer, Merchant and Bank states                                         --
--------------------------------------------------------------------------------

-- State and msg description:
--  gr   "Goods Request"
--  eg   "Encrypted Goods"
--  epo  "Electronic Payment Order"
--  pa   "Payment Slip"
--  pa_c "Payment Slip (bank state after response to consumer)"
--  pa_m "Payment Slip (bank state after response to merchant)"
--  np   "No Payment"
--  nr   "No Record"
--  te   "Transaction Enquiry"
--  eepo "Endorsed EPO"

-- c_state contains the state of the consumer
c_state: {idle, gr, epo, te, complete, error};

-- m_state contains the state of the merchant
m_state: {idle, eg, eepo, pa, np, error};

-- b_state contains the state of the bank
b_state: {idle, pa_m, pa_c, np, nr, error};

--------------------------------------------------------------------------------
-- Variable assignment                                                        --
--------------------------------------------------------------------------------

ASSIGN

-- At the beginning all entities start with the idle state

init(c_state) := idle;
init(m_state) := idle;
init(b_state) := idle;

--------------------------------------------------------------------------------
-- Model definition                                                           --
--------------------------------------------------------------------------------

-- When the entity sends a msg to a other entity 
-- it changes his state to the sended msg

--------------------------------------------------------------------------------
-- Consumer                                                                   --
--------------------------------------------------------------------------------

next(c_state) := 
  case
    c_state = idle : {idle, gr};
    c_state = gr & m_state = eg : epo;
    c_state = epo & m_state = pa : te;
    c_state = te & b_state = pa_c : complete;
    -- when the there is no paymant or no record the state is set to error 
    m_state = np | b_state = np | b_state = nr : error;
    TRUE          : c_state;
  esac;

--------------------------------------------------------------------------------
-- Merchant                                                                   --
--------------------------------------------------------------------------------

next(m_state) := 
  case
    m_state = idle & c_state = gr : eg;
    m_state = eg & c_state = epo : eepo;
    m_state = eepo & b_state = pa_m : {pa, np};
    m_state = pa & c_state = te : idle;
    -- when the there is no paymant the state is set to error 
    m_state = np | b_state = np : error;
    TRUE          : m_state;
  esac;

--------------------------------------------------------------------------------
-- Bank                                                                   --
--------------------------------------------------------------------------------

next(b_state) := 
  case
    b_state = idle & m_state = eepo : {pa_m, np};
    b_state = pa_m & c_state = te : {pa_c, np, nr};
    b_state = pa_c & c_state = complete : idle;
    -- when the there is no paymant the state is set to error 
    m_state = np : error;
    TRUE          : b_state;
  esac;

--------------------------------------------------------------------------------
-- Model Checking                                                             --
--------------------------------------------------------------------------------

-- In at least one execution path, sooner or later it will be true,
-- means that the transaction has been concluded in at lest one execution path
SPEC
EF  (c_state = complete & m_state = idle & b_state = idle);

-- In at least one execution path, it is always true,
-- means at least on execution path excites whitout an error

SPEC
EG !(c_state = error | m_state = error | b_state = error);


-- In all execution paths, sooner or later it will be true,
-- means that all execution paths guarantee that the consumer doesn't recive the key to encrypt the goods unless he has paid, and that the consumer recives the key when he has paid.
SPEC
AF  (((c_state = complete | c_state = idle) & m_state = idle & b_state = idle) | (c_state = error | m_state = error | b_state = error));
